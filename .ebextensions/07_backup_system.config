# Automated backup system for RS Systems production data
files:
  "/opt/backup_system.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python3
      """
      Production Backup System for RS Systems
      Backs up SQLite database and media files to S3
      """
      import os
      import sys
      import boto3
      import datetime
      import subprocess
      from pathlib import Path

      # Configuration
      S3_BUCKET = 'rs-systems-backups-20250823'
      APP_DIR = '/var/app/current'

      def backup_database():
          """Backup SQLite database to S3"""
          db_path = Path(APP_DIR) / 'db.sqlite3'
          
          if not db_path.exists():
              print(f"Database not found at {db_path}")
              return False
          
          timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
          backup_filename = f'database_backup_{timestamp}.sqlite3'
          
          try:
              s3 = boto3.client('s3')
              s3.upload_file(str(db_path), S3_BUCKET, f'database/{backup_filename}')
              print(f"Database backed up to S3: {backup_filename}")
              return True
          except Exception as e:
              print(f"Database backup failed: {e}")
              return False

      def backup_media_files():
          """Backup media files to S3"""
          media_dir = Path(APP_DIR) / 'media'
          
          if not media_dir.exists():
              print(f"Media directory not found at {media_dir}")
              return False
          
          timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
          
          try:
              cmd = [
                  'aws', 's3', 'sync', 
                  str(media_dir), 
                  f's3://{S3_BUCKET}/media_{timestamp}/',
                  '--delete'
              ]
              
              result = subprocess.run(cmd, capture_output=True, text=True)
              
              if result.returncode == 0:
                  print(f"Media files backed up to S3: media_{timestamp}/")
                  return True
              else:
                  print(f"Media backup failed: {result.stderr}")
                  return False
                  
          except Exception as e:
              print(f"Media backup failed: {e}")
              return False

      def cleanup_old_backups(days_to_keep=30):
          """Remove backups older than specified days"""
          try:
              s3 = boto3.client('s3')
              cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days_to_keep)
              
              response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix='database/')
              if 'Contents' in response:
                  for obj in response['Contents']:
                      if obj['LastModified'].replace(tzinfo=None) < cutoff_date:
                          s3.delete_object(Bucket=S3_BUCKET, Key=obj['Key'])
                          print(f"Deleted old backup: {obj['Key']}")
              
              return True
              
          except Exception as e:
              print(f"Cleanup failed: {e}")
              return False

      def main():
          """Main backup function"""
          print(f"Starting backup at {datetime.datetime.now()}")
          
          db_success = backup_database()
          media_success = backup_media_files()
          cleanup_success = cleanup_old_backups()
          
          if db_success and media_success and cleanup_success:
              print("Backup completed successfully")
              return 0
          else:
              print("Backup completed with errors")
              return 1

      if __name__ == '__main__':
          sys.exit(main())

  "/etc/cron.d/rs-systems-backup":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Daily backup at 2 AM UTC
      0 2 * * * root /usr/bin/python3 /opt/backup_system.py >> /var/log/backup.log 2>&1